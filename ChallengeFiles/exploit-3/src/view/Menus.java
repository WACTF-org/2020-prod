/**************************************************************************
* AUTHOR:                                                                   
* FILE NAME: Menus.java
* CREATED: 12-09-2020
* MODIFIED: Mon 14 Sep 2020 22:20:58
* PURPOSE:                                                                  
***************************************************************************/
package view;
import controller.LibraryController;
import model.Game;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.io.IOException;
public class Menus
{
    public static void mainMenu(LibraryController control)
    {
        boolean done = false;
        char choice = 0;
        Scanner sc = new Scanner(System.in);
        do
        {
            System.out.println("");
            System.out.println("Top Menu");
            System.out.println("1 - Load Library");
            System.out.println("2 - New Library");
            System.out.println("0 - Exit");
            choice = sc.nextLine().charAt(0);
            switch(choice)
            {
                case '1':
                    loadMenu(control);
                break;
                case '2':
                    newMenu(control);
                break;
                case '0': 
                    done = true;
                break;
                default:
                    printInvalid();
            }
        }while(!done);
    }
    
    private static void loadMenu(LibraryController controller)
    {
        Scanner sc = new Scanner(System.in);
        String filename = "";
        System.out.print("Enter filename: ");
        filename = sc.nextLine();
        try
        {
            controller.loadLibrary(filename);
            libraryMenu(controller);
        }
        catch(IOException ioe)
        {
            System.out.println("Error opening file: " + filename);
        }
    }

    private static void newMenu(LibraryController controller)
    {
        Scanner sc = new Scanner(System.in);
        String name = "";
        System.out.print("Enter new library name: ");
        name = sc.nextLine();
        try
        {
            controller.newLibrary(name); 
        }
        catch(IllegalArgumentException iae)
        {
            System.out.println("Could not create new library:\n\t" + iae.getMessage());
        }
        libraryMenu(controller);
    }

    private static void libraryMenu(LibraryController controller)
    {
        boolean done = false;
        char choice = 0;
        Scanner sc = new Scanner(System.in);
        do
        {
            System.out.println("");
            System.out.println("Main Menu");
            System.out.println("1 - Add a Game");
            System.out.println("2 - Edit a Game");
            System.out.println("3 - Delete a Game");
            System.out.println("4 - List Games");
            System.out.println("7 - Exit without Saving");
            System.out.println("0 - Save and Exit");
            choice = sc.nextLine().charAt(0);
            switch(choice)
            {
                case '1':
                    addGameMenu(controller);
                break;
                case '2':
                    editGameMenu(controller);
                break;
                case '3':
                    deleteGameMenu(controller);
                break;
                case '4':
                    listGames(controller);
                break;
                case '7':
                    done = true;
                break;
                case '0': 
                    done = true;
                    saveMenu(controller);
                break;
                default:
                    printInvalid();
            }
        }while(!done);
    }

    private static void addGameMenu(LibraryController controller)
    {
        Scanner sc = new Scanner(System.in);
        String name = "";
        String publisher = "";
        int barcode = 0;
        Game.Rating rating = null;

        System.out.print("Enter game name: ");
        name = sc.nextLine();
        System.out.print("Enter publisher: ");
        publisher = sc.nextLine();
        rating = getRating();
        barcode = getBarcode();
        controller.addGameToLibrary(name, rating, barcode, publisher);
    }
   
    private static void editGameMenu(LibraryController controller)
    {
        Scanner sc = new Scanner(System.in);
        int id = 0;
        String tmp = "";
        String name = "";
        String publisher = "";
        Game.Rating rating = null;
        int barcode = 0;
        boolean done = false;
        do
        {
            try
            {
                listGames(controller);
                System.out.print("Enter Game ID to Edit: ");
                tmp = sc.nextLine();
                id = Integer.parseInt(tmp);
                if(id <= 0 )
                {
                    throw new IllegalArgumentException("Negative Number");
                }
                done = true;
            }
            catch(InputMismatchException ime)
            {
                printInvalid();
                System.out.println("Use only a positve number\n");
            }
            catch(IllegalArgumentException iae)
            {
                printInvalid();
                System.out.println("Use only a positve number\n");
            }
        }while(!done);
        try
        {
            System.out.print("Enter game name: ");
            name = sc.nextLine();
            System.out.print("Enter publisher: ");
            publisher = sc.nextLine();
            rating = getRating();
            barcode = getBarcode();
            controller.editGameInLibrary(id-1, name, rating, barcode, publisher);
            System.out.println("Game #" + id + " was edited");
        }
        catch(Exception e)
        {
            //TODO add a better handler here
            System.out.println("DEBUG: OH NO! code\n"+ e.getMessage());
        }
    }

    private static void deleteGameMenu(LibraryController controller)
    {
        Scanner sc = new Scanner(System.in);
        int id = 0;
        String tmp = "";
        boolean done = false;
        do
        {
            try
            {
                listGames(controller);
                System.out.print("Enter Game ID to Delete: ");
                tmp = sc.nextLine();
                id = Integer.parseInt(tmp);
                if(id <= 0 )
                {
                    throw new IllegalArgumentException("Negative Number");
                }
                done = true;
            }
            catch(InputMismatchException ime)
            {
                printInvalid();
                System.out.println("Use only a positve number\n");
            }
            catch(IllegalArgumentException iae)
            {
                printInvalid();
                System.out.println("Use only a positve number\n");
            }
        }while(!done);
        try
        {
            controller.removeGameFromLibrary(id-1);
            System.out.println("Game #" + id + " was removed");
        }
        catch(Exception e)
        {
            //TODO add a better handler here
            System.out.println("DEBUG: OH NO! code\n"+ e.getMessage());
        }
    }

    private static Game.Rating getRating()
    {
        Game.Rating rating = null;
        Scanner sc = new Scanner(System.in);
        char choice;
        boolean done = false;
        do
        {
            System.out.println("");
            System.out.println("1 - E");
            System.out.println("2 - G");
            System.out.println("3 - PG");
            System.out.println("4 - M");
            System.out.println("5 - MA (15+)");
            System.out.println("6 - R (18+)");
            choice = sc.nextLine().charAt(0);
            switch(choice)
            {
                case '1':
                    rating=Game.Rating.E;
                    done = true;
                break;
                case '2':
                    rating=Game.Rating.G;
                    done = true;
                break;
                case '3':
                    rating=Game.Rating.PG;
                    done = true;
                break;
                case '4':
                    rating=Game.Rating.M;
                    done = true;
                break;
                case '5':
                    rating=Game.Rating.MA;
                    done = true;
                break;
                case '6':
                    rating=Game.Rating.R;
                    done = true;
                break;
                default:
                    printInvalid();
            }
        }while(!done);

        return rating;
    }

    private static void saveMenu(LibraryController control)
    {
        try
        {
            Scanner sc = new Scanner(System.in);
            String path = "";
            System.out.print("Enter save path: ");
            path = sc.nextLine();
            control.saveLibrary(path);
        }
        catch(Exception e)
        {
            //TODO fix me when you know what exception you are throwing.
        }
    }
    
    private static int getBarcode()
    {
        Scanner sc = new Scanner(System.in);
        int code = 0;
        String tmp = "";
        boolean done = false;
        do
        {
            try
            {
                System.out.print("Enter game's barcode: ");
                tmp = sc.nextLine();
                code = Integer.parseInt(tmp);
                if(code <= 0 )
                {
                    throw new IllegalArgumentException("Negative Number");
                }
                done = true;
            }
            catch(InputMismatchException ime)
            {
                printInvalid();
                System.out.println("Use only a positve number\n");
            }
            catch(IllegalArgumentException iae)
            {
                printInvalid();
                System.out.println("Use only a positve number\n");
            }
        }while(!done);
        return code;
    }

    private static void printInvalid()
    {
        System.out.println("Invalid option. Try harder.");
    }

    private static void listGames(LibraryController control)
    {
        LinkedList<Game> games;
        int id = 1;
        games = control.getGamesFromLibrary();
        System.out.println("\n# - Name - Rating - Publisher - Barcode");
            for (Game game : games ) 
            { 
                System.out.println(id + " - " + game.toString());
                id++;
            }
    }
}
